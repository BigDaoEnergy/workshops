/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ser, SerInterface } from "../Ser";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromDelegate",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toDelegate",
        type: "address",
      },
    ],
    name: "DelegateChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "delegate",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "previousBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newBalance",
        type: "uint256",
      },
    ],
    name: "DelegateVotesChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "checkpoints",
    outputs: [
      {
        internalType: "uint32",
        name: "fromBlock",
        type: "uint32",
      },
      {
        internalType: "uint96",
        name: "votes",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "delegateBySig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "delegates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCurrentVotes",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getPriorVotes",
    outputs: [
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "numCheckpoints",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526a3913517ebd3c0c6500000060005534801561001f57600080fd5b506108518061002f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063782d6fe111610071578063782d6fe11461018f5780638da5cb5b146101bf57806395d89b41146101dd578063b4b5ea57146101fb578063c3cda5201461022b578063f1127ed814610247576100b4565b806306fdde03146100b957806318160ddd146100d7578063313ce567146100f5578063587cde1e146101135780635c19a95c146101435780636fcfff451461015f575b600080fd5b6100c1610278565b6040516100ce9190610616565b60405180910390f35b6100df6102b1565b6040516100ec9190610638565b60405180910390f35b6100fd6102b7565b60405161010a9190610697565b60405180910390f35b61012d6004803603810190610128919061044d565b6102bc565b60405161013a91906105fb565b60405180910390f35b61015d6004803603810190610158919061044d565b6102ef565b005b6101796004803603810190610174919061044d565b6102f2565b6040516101869190610653565b60405180910390f35b6101a960048036038101906101a49190610476565b610315565b6040516101b691906106b2565b60405180910390f35b6101c761031d565b6040516101d491906105fb565b60405180910390f35b6101e5610343565b6040516101f29190610616565b60405180910390f35b6102156004803603810190610210919061044d565b61037c565b60405161022291906106b2565b60405180910390f35b610245600480360381019061024091906104b2565b610383565b005b610261600480360381019061025c919061053b565b61038b565b60405161026f92919061066e565b60405180910390f35b6040518060400160405280600781526020017f5365722044414f0000000000000000000000000000000000000000000000000081525081565b60005481565b601281565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b60066020528060005260406000206000915054906101000a900463ffffffff1681565b600092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600381526020017f534552000000000000000000000000000000000000000000000000000000000081525081565b6000919050565b505050505050565b6005602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900463ffffffff16908060000160049054906101000a90046bffffffffffffffffffffffff16905082565b6000813590506103f3816107a8565b92915050565b600081359050610408816107bf565b92915050565b60008135905061041d816107d6565b92915050565b600081359050610432816107ed565b92915050565b60008135905061044781610804565b92915050565b60006020828403121561045f57600080fd5b600061046d848285016103e4565b91505092915050565b6000806040838503121561048957600080fd5b6000610497858286016103e4565b92505060206104a88582860161040e565b9150509250929050565b60008060008060008060c087890312156104cb57600080fd5b60006104d989828a016103e4565b96505060206104ea89828a0161040e565b95505060406104fb89828a0161040e565b945050606061050c89828a01610438565b935050608061051d89828a016103f9565b92505060a061052e89828a016103f9565b9150509295509295509295565b6000806040838503121561054e57600080fd5b600061055c858286016103e4565b925050602061056d85828601610423565b9150509250929050565b610580816106e9565b82525050565b6000610591826106cd565b61059b81856106d8565b93506105ab818560208601610764565b6105b481610797565b840191505092915050565b6105c881610725565b82525050565b6105d78161072f565b82525050565b6105e68161073f565b82525050565b6105f58161074c565b82525050565b60006020820190506106106000830184610577565b92915050565b600060208201905081810360008301526106308184610586565b905092915050565b600060208201905061064d60008301846105bf565b92915050565b600060208201905061066860008301846105ce565b92915050565b600060408201905061068360008301856105ce565b61069060208301846105ec565b9392505050565b60006020820190506106ac60008301846105dd565b92915050565b60006020820190506106c760008301846105ec565b92915050565b600081519050919050565b600082825260208201905092915050565b60006106f482610705565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b60005b83811015610782578082015181840152602081019050610767565b83811115610791576000848401525b50505050565b6000601f19601f8301169050919050565b6107b1816106e9565b81146107bc57600080fd5b50565b6107c8816106fb565b81146107d357600080fd5b50565b6107df81610725565b81146107ea57600080fd5b50565b6107f68161072f565b811461080157600080fd5b50565b61080d8161073f565b811461081857600080fd5b5056fea2646970667358221220840ba3f6724ef9c28b6efce469d3c1bfce19788bb2b8800191a5a8d5bcea986d64736f6c63430008040033";

type SerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ser__factory extends ContractFactory {
  constructor(...args: SerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Ser";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ser> {
    return super.deploy(overrides || {}) as Promise<Ser>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Ser {
    return super.attach(address) as Ser;
  }
  connect(signer: Signer): Ser__factory {
    return super.connect(signer) as Ser__factory;
  }
  static readonly contractName: "Ser";
  public readonly contractName: "Ser";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SerInterface {
    return new utils.Interface(_abi) as SerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ser {
    return new Contract(address, _abi, signerOrProvider) as Ser;
  }
}
